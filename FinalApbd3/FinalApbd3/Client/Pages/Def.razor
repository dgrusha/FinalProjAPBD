@page "/c"
@using FinalApbd3.Shared.DTO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using FinalApbd3.Shared.Models
@using Newtonsoft.Json
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Charts
@using Repository
@using System.Text.Json
@inject IPolygonRepository PolygonRepository
@inject ICompanyRepository CompanyRepository
@attribute [Authorize]

<style type="text/css">
        .xyz {
            background-size: auto;
            text-align: center;
            padding-top: 100px;
        }
        .btn-circle.btn-sm {
            width: 30px;
            height: 30px;
            padding: 6px 0px;
            border-radius: 15px;
            font-size: 8px;
            text-align: center;
            margin-left: 2.5em;
        }
        .btn-circle.btn-md {
            width: 50px;
            height: 50px;
            padding: 7px 10px;
            border-radius: 25px;
            font-size: 20px;
            text-align: center;
            margin-left: 2.5em;
        }
    </style>

<h2>DashBoard</h2>



    <SfAutoComplete Width="300px" TItem="Company" TValue="string" Placeholder="Select word" DataSource="@data4" ID="SearchField" @bind-Value = "@CompanyNameHidden">
        <AutoCompleteFieldSettings Value="ticker"></AutoCompleteFieldSettings>
    </SfAutoComplete>
    <br>
    <br>
    <button @onclick="take" style="margin-bottom:2em" class="btn btn-primary" ceiling="10" floor="0">Take Hint</button>
    <button @onclick="(() => Add(CompanyNameHidden))" style="margin-bottom:2em" class="btn btn-primary">Get Data</button>
    
    @if (data3.Count() == 0)
    {
        <p style="margin-bottom:2em" ceiling="10" floor="0">
        <SfDropDownList Width="300px" TItem="DateVariants" TValue="string" DataSource="data2" Placeholder="Put a period of time (by default current day)">

            <DropDownListEvents  TItem="DateVariants" TValue="string" ValueChange="@ValueChangeHandler"></DropDownListEvents>

            <DropDownListFieldSettings Text="Name" Value="Value">
            </DropDownListFieldSettings>

        </SfDropDownList>
        </p>
        <h3 class="text-primary">No info provided</h3>

    }else
    {

        <p style="margin-bottom:2em" ceiling="10" floor="0">
        <SfDropDownList Width="300px" TItem="DateVariants" TValue="string" DataSource="data2" Placeholder="Put a period of time (by default current day)">
                <DropDownListEvents  TItem="DateVariants" TValue="string" ValueChange="@ValueChangeHandler"></DropDownListEvents>
                <DropDownListFieldSettings Text="Name" Value="Value">
            </DropDownListFieldSettings>

        </SfDropDownList>
        </p>

        <SfStockChart>
            <StockChartSeriesCollection>
                <StockChartSeries  Type="@Syncfusion.Blazor.Charts.ChartSeriesType.Candle" XName="date" 
                DataSource="@data3" High="h" Low="l" Close="c" Open="o">
                </StockChartSeries>
            </StockChartSeriesCollection>
        </SfStockChart>

    @if (@dailyOcValid == true)
    {
        <div class="p-3 mb-2 bg-light text-dark">
            <h2 class="font-weight-bold">INFO</h2>
            <p class="text-primary">From: @dailyOC.from  Close: @dailyOC.close   </p>
            <p class="text-primary">Symbol: @dailyOC.symbol Volume: @dailyOC.volume </p>
            <p class="text-primary">Open: @dailyOC.open After hours: @dailyOC.afterHours</p>
            <p class="text-primary">High: @dailyOC.high Pre market: @dailyOC.preMarket</p>
            <br>
        </div>
    }
    else 
    {
        <p class="alert alert-danger" role="alert">No info on supposed day was found</p>
    }
    @if (!String.IsNullOrEmpty(@isAdded))
    {
        <p class="alert alert-primary" role="alert">@isAdded</p>
    }
    
        <button @onclick="update" style="text-align:center" class="btn btn-primary btn-circle btn-md">+</button>
        
        <img src=@logo width="40" height="40" ALIGN="left" alt="Logo"> <h3 class="font-weight-bold">@dataByTicker.results.name (@dataByTicker.results.ticker)</h3> 
        <div class="p-3 mb-2 bg-light text-dark">
            <h4 class="font-weight-bold">Desc :</h4>
            <p class="text-primary">  @dataByTicker.results.description</p>
            <h4 class="font-weight-bold">Country :</h4>
            <p class="text-primary">  @dataByTicker.results.locale.ToUpper()</p>
            <h4 class="font-weight-bold">Industry :</h4>
            <p class="text-primary">  @dataByTicker.results.sic_description</p>
            <h4 class="font-weight-bold">HomePage :</h4>
            <p class="text-primary">  @dataByTicker.results.homepage_url</p>
        </div>
         <h2 class="font-weight-bold">News</h2>
           @foreach (var item in @news)
           {
               <blockquote class="blockquote">
                    <p class="mb-0">@item.title</p>
                    <footer class="blockquote-footer">@item.author at <cite title="Source Title">@item.published_utc</cite></footer>
               </blockquote>
           }
    
           
    }
@code {
    public List<CompanyContainer> companyContainers = new List<CompanyContainer>(); 
    public string CompanyNameHidden = "";
    public string CompanyNameShown = "";
    public string DateOptions = "1";
    public DailyOC dailyOC = new DailyOC();
    public bool dailyOcValid = true;
    public List<News> news = new List<News>();
    public DataByTicker dataByTicker = new DataByTicker();
    public string logo = "";
    public string isAdded = "";

    public class DateVariants
    {
        public string Name { get; set; }

        public int Value { get; set; }

    };

    string res ="";

    public async Task take()
    {
        CompanyContainer cc = (await PolygonRepository.takePolygonStr(CompanyNameHidden));
        data4 = cc.results;
    }

    public async Task update()
    {
        CompanyDTOClient comp = new CompanyDTOClient()
            {
                Name = dataByTicker.results.name,
                Symbol = dataByTicker.results.ticker,
                Sector = dataByTicker.results.sic_description,
                Country = dataByTicker.results.locale.ToUpper(),
                Ceo = "CeoIsNotSpecified"
            };
        isAdded =  (await CompanyRepository.AddInfo(comp));
    }

    public List<Data> data3 = new List<Data>();
    protected async Task Add(string name)
    {
        CompanyNameShown = name;

        DataContainer dc = (await PolygonRepository.takeDataForChart(CompanyNameShown+DateOptions));
        if (dc.resultsCount != 0)
        {
            data3 = dc.results;
            foreach (var item in data3)
            {
                item.date = item.GetDate();
            }
        }
        dailyOC = (await PolygonRepository.takeDataForDaily(CompanyNameShown+DateOptions));
        if (dailyOC.status == "404") { dailyOcValid = false; }
        dataByTicker = (await PolygonRepository.takeDataForDetails(CompanyNameShown));
        logo = dataByTicker.results.branding.logo_url + "?apiKey=Ub9KTYEXiAeWEUQBdRFBjsNUv8Yy285B";
        NewsContainer nc = (await PolygonRepository.takeDataForNews(CompanyNameShown));
        news = nc.results;
        isAdded = "";
    }

    protected void ValueChangeHandler(ChangeEventArgs<string, DateVariants> args)
    {
        int tmp = args.ItemData.Value;
        if (tmp == 1)
        {
            DateOptions = "1";
        }
        else if (tmp == 2)
        {
            DateOptions = "2";    
        }
        else if (tmp == 3)
        {
            DateOptions = "3";       
        }
        else if (tmp == 4)
        {
            DateOptions = "4";
        }
    }
    List<Company> data4 = new List<Company>();

    string defValForList = "Current day";
    List<DateVariants> data2 = new List<DateVariants>
    {
     new DateVariants(){ Name = "Current day" , Value=1 },
     new DateVariants(){ Name ="1 week ago" , Value=2 },
     new DateVariants(){ Name ="1 month ago" , Value=3 },
     new DateVariants(){ Name ="3 month ago" , Value=4 },
    };

   
}
